% Introduction
% =========================================================================
%{
The Optimization module in the OCE method to get the optimal parameters.
%}
% =========================================================================
% Author: Bozhen Zhou (zbz22@mails.tsinghua.edu.cn)
% =========================================================================
% Tips
% =========================================================================
%{
Run the program directly to get the optimal parameters in the "xmin" and
the corresponding function value in the "fmin".

The hlo.mat can be generated by yourself by running the
generate_simulation.mlapp with the (0,0,1) parameters.
%}
clear; close all;clc;
addpath .\function\
load ../data/simulation_data/hlo.mat;  % the simulation data
exp_sum_img = zeros(256,256);          % the experimental data
for dis = 1800:200:4800
    read_path = sprintf("../data/experiment_data/test_in/a1b1dis%d.bmp",dis);
    img = imread(read_path);
    exp_sum_img = exp_sum_img + double(img);
end
exp_mean_img = uint8(exp_sum_img/16);           % the reference experiment image Ie
mean_recon = @(x,y,z) MeanOperation(x,y,hlo,z); % the reference synthetic image Is

% the fitness function in genetic algorithm (GA)
loss = @(x) 1-ssim(exp_mean_img,mean_recon(round(x(1),2),round(x(2),2),round(x(3),2)));
x0 = [0,0.40,1.00]; 
options = optimoptions('ga','PlotFcn',@gaplotbestf,'UseParallel', true, 'UseVectorized', ...
    false,'MaxGenerations',100);
Nonlcon = @ (x) deal ([],round (x,2) - x);

% the lower and upper bounds for the three paremeters
[xmin,fmin] = ga(loss,3,[],[],[],[],[-1,0.20,0.60],[0,0.60,1.40],[],options);

function sim_mean_img = MeanOperation(noise_mean,noise_sigma,hlo,gamma)
    zuida = max(hlo(:));  zuixiao = min(hlo(:));
    leng = zuida - zuixiao;
    sigma = std2(hlo);
    this_hlo = hlo + normrnd(noise_mean*leng,noise_sigma*sigma,[256,256]);
    sim_sum_img = zeros(256,256);
    for dis = 1800:200:4800
        this_recon = Backpropagation(-1*dis*1e-6,this_hlo,2.2e-6,660e-9);
        this_recon = abs(this_recon);
        this_recon = uint8(255*mat2gray(this_recon));
        this_recon = imadjust(this_recon,[0 1],[0 1],gamma);
        sim_sum_img = sim_sum_img + double(this_recon);
    end
    sim_mean_img = uint8(sim_sum_img/16);
end